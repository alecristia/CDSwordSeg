version
install.packages("â€˜wordbankr")
install.packages("wordbankr")
library(xlsx)
library(wordbankr)
library(magrittr)
library(dplyr)
library(assertthat)
library(stringr)
library(ggplot2)
library(knitr)
opts_chunk$set(message = FALSE, warning = FALSE, cache = TRUE, fig.align = "center")
library(tidyr)
library(purrr)
library(readr)
install.packages("devtools")
devtools::install_github("langcog/langcog")
library(langcog)
library(ggrepel)
library(directlabels)
library(feather)
WordsSegmentedAllAlgosIn10sub <- read.table("~/Documents/CDSwordSeg/results/res-brent-CDS/ComparaisonAvecAGu/WordsSegmentedAllAlgosIn10sub.txt", quote="\"", comment.char="")
words_all_algos=WordsSegmentedAllAlgosIn10sub
View(WordsSegmentedAllAlgosIn10sub)
View(words_all_algos)
remove(WordsSegmentedAllAlgosIn10sub)
words_algo_in_or_CDI=data_frame()
for (i in 1:nrow(words_all_algos))
{
words_algo_in_or_CDI[i,1]=words_all_algos[i,1]
if (length(which(words_all_algos[i,1]==prop_understands$words))=="0")
{words_algo_in_or_CDI[i,2]="NO"}
else
{words_algo_in_or_CDI[i,2]="YES"}
}
colnames(words_algo_in_or_CDI)=c("segmented_words","in_CDI")
words_of_algo_NOT_in_CDI=subset(words_algo_in_or_CDI,in_CDI=='NO', select=c(segmented_words, in_CDI))
words_of_algo_IN_CDI=subset(words_algo_in_or_CDI,in_CDI=='YES', select=c(segmented_words, in_CDI))
View(words_all_algos)
View(words_algo_in_or_CDI)
all_prop_data<-feather::read_feather("aoa-prediction-master/aoa_estimation/saved_data/all_prop_data.feather")
View(all_prop_data)
prop_data <- all_prop_data %>%
select(language, measure, lexical_classes, words, prop) %>%
distinct()
prop_understands= subset(prop_data, measure=="understands", select=c(language, lexical_classes, words, prop))
colnames(prop_understands)[3]<-"uni_lemma"
prop_understands=subset(prop_understands, select=c( lexical_classes, uni_lemma, prop))
words_algo_in_or_CDI=data_frame()
for (i in 1:nrow(words_all_algos))
{
words_algo_in_or_CDI[i,1]=words_all_algos[i,1]
if (length(which(words_all_algos[i,1]==prop_understands$words))=="0")
{words_algo_in_or_CDI[i,2]="NO"}
else
{words_algo_in_or_CDI[i,2]="YES"}
}
colnames(words_algo_in_or_CDI)=c("segmented_words","in_CDI")
words_of_algo_NOT_in_CDI=subset(words_algo_in_or_CDI,in_CDI=='NO', select=c(segmented_words, in_CDI))
words_of_algo_IN_CDI=subset(words_algo_in_or_CDI,in_CDI=='YES', select=c(segmented_words, in_CDI))
View(words_of_algo_IN_CDI)
View(words_of_algo_NOT_in_CDI)
View(words_all_algos)
View(words_algo_in_or_CDI)
View(prop_understands)
prop_understands= subset(prop_data, measure=="understands", language="English",select=c( lexical_classes, words, prop))
View(prop_understands)
View(prop_data)
View(prop_understands)
View(prop_data)
View(all_prop_data)
View(prop_understands)
prop_understands= subset(prop_data, measure=="understands" & language="English",select=c( lexical_classes, words, prop))
prop_understands= subset(prop_data, measure=="understands" && language="English",select=c( lexical_classes, words, prop))
prop_understands= subset(prop_data, measure=="understands" && language=="English",select=c( lexical_classes, words, prop))
View(prop_understands)
prop_data_english <- filter(prop_data, language == "English")
View(prop_data_english)
prop_understands= subset(prop_data_english, measure=="understands",select=c( lexical_classes, words, prop))
View(prop_understands)
words_algo_in_or_CDI=data_frame()
for (i in 1:nrow(words_all_algos))
{
words_algo_in_or_CDI[i,1]=words_all_algos[i,1]
if (length(which(words_all_algos[i,1]==prop_understands$words))=="0")
{words_algo_in_or_CDI[i,2]="NO"}
else
{words_algo_in_or_CDI[i,2]="YES"}
}
colnames(words_algo_in_or_CDI)=c("segmented_words","in_CDI")
words_of_algo_NOT_in_CDI=subset(words_algo_in_or_CDI,in_CDI=='NO', select=c(segmented_words, in_CDI))
words_of_algo_IN_CDI=subset(words_algo_in_or_CDI,in_CDI=='YES', select=c(segmented_words, in_CDI))
View(words_algo_in_or_CDI)
View(words_of_algo_IN_CDI)
View(words_of_algo_NOT_in_CDI)
df_IN_CDI=data_frame(words=numeric())
for (i in 1:nrow(words_all_algos))
{
if (length(which(words_all_algos[1,1]==prop_understands$words))!="0")
{df_IN_CDI=subset(prop_understands, words==words_all_algos[1,1], select = c(language, lexical_classes,words,prop))}
if (length(which(words_all_algos[i,1]==prop_understands$words))!="0")
{df_IN_CDI=rbind(df_IN_CDI, subset(prop_understands, words==words_all_algos[i,1], select = c(lexical_classes,words,prop)))}
}
View(df_IN_CDI)
colnames(df_IN_CDI)[2]="uni_lemma"
colnames(prop_understands)[3]<-"uni_lemma"
prop_understands=subset(prop_understands, select=c( lexical_classes, uni_lemma, prop))
View(prop_data_english)
View(prop_understands)
View(df_IN_CDI)
prop_understands= subset(prop_data_english, measure=="understands",select=c( lexical_classes, words, prop))
View(prop_understands)
colnames(prop_understands)[2]<-"uni_lemma"
View(prop_understands)
library(xlsx)
setwd("~/Documents/CDSwordSeg/results/res-brent-CDS/AnalyseCDI")
write.xlsx(df_IN_CDI, "WordsInCDI.xlsx")
View(df_IN_CDI)
View(df_IN_CDI)
View(all_prop_data)
aoa_data <- feather::read_feather("aoa-prediction-master/aoa_estimation/saved_data/aoa_data.feather")
setwd("~/Documents/")
aoa_data <- feather::read_feather("aoa-prediction-master/aoa_estimation/saved_data/aoa_data.feather")
View(aoa_data)
admins <- get_administration_data(mode = data_mode) %>%
select(data_id, age, language, form)
# all items in all languages
items <- get_item_data(mode = data_mode) %>%
mutate(num_item_id = as.numeric(substr(item_id, 6, nchar(item_id))),
definition = tolower(definition))
languages <- c("Croatian", "Danish", "English", "French (Quebec)", "Italian",
"Norwegian", "Russian", "Spanish", "Swedish", "Turkish")
# choose words in english
words <- items %>%
filter(type == "word", language=="English")
invalid_uni_lemmas <- words %>%
group_by(uni_lemma) %>%
filter(n() > 1,
length(unique(lexical_class)) > 1) %>%
select(language, uni_lemma, lexical_class, definition) %>%
arrange(language, uni_lemma)
get_inst_data <- function(inst_items) {
inst_language <- unique(inst_items$language)
inst_form <- unique(inst_items$form)
inst_admins <- filter(admins, language == inst_language, form == inst_form)
get_instrument_data(instrument_language = inst_language,
instrument_form = inst_form,
items = inst_items$item_id,
administrations = inst_admins,
iteminfo = inst_items,
mode = data_mode) %>%
filter(!is.na(age)) %>%
mutate(produces = !is.na(value) & value == "produces",
understands = !is.na(value) &
(value == "understands" | value == "produces")) %>%
select(-value) %>%
gather(measure, value, produces, understands) %>%
mutate(language = inst_language,
form = inst_form)
}
get_lang_data <- function(lang_items) {
lang_items %>%
split(.$form) %>%
map_df(get_inst_data) %>%
# production for WS & WG, comprehension for WG only
filter(measure == "produces" | form == "WG")
}
raw_data <- words %>%
split(.$language) %>%
map(get_lang_data)
#Fit models to predict the proportion of children of each age
# who are reported to understands/produce each word, and the word's age of acquisition.
fit_inst_measure_uni <- function(inst_measure_uni_data) {
ages <- min(inst_measure_uni_data$age):max(inst_measure_uni_data$age)
constants <- inst_measure_uni_data %>%
ungroup() %>%
select(language, measure, uni_lemma, lexical_class, words) %>%
distinct() %>%
group_by(language, measure, uni_lemma) %>%
summarise(lexical_classes = lexical_class %>% unique() %>% sort() %>%
paste(collapse = ", "),
words = words %>% strsplit(", ") %>% unlist() %>% unique() %>%
paste(collapse = ", "))
props <- inst_measure_uni_data %>%
ungroup() %>%
select(age, prop)
tryCatch({
model <- robustbase::glmrob(cbind(num_true, num_false) ~ age,
family = "binomial",
data = inst_measure_uni_data, y = TRUE)
fit <- predict(model, newdata = data.frame(age = ages), se.fit = TRUE)
aoa <- -model$coefficients[["(Intercept)"]] / model$coefficients[["age"]]
fit_prop <- inv.logit(fit$fit)
fit_se <- fit$se.fit
}, error = function(e) {
aoa <<- fit <<- fit_prop <<- fit_se <<- NA
})
data_frame(age = ages, fit_prop = fit_prop, fit_se = fit_se,
aoa = aoa, language = constants$language,
measure = constants$measure,
uni_lemma = constants$uni_lemma,
lexical_classes = constants$lexical_classes,
words = constants$words) %>%
left_join(props, by = "age")
}
fit_inst_measure <- function(inst_measure_data) {
inst_measure_by_uni <- inst_measure_data %>%
group_by(language, measure, lexical_class, uni_lemma, age, data_id) %>%
summarise(uni_value = any(value),
words = definition %>% sort() %>% paste(collapse = ", ")) %>%
group_by(language, measure, lexical_class, uni_lemma, words, age) %>%
summarise(num_true = sum(uni_value, na.rm = TRUE),
num_false = n() - num_true,
prop = mean(uni_value, na.rm = TRUE))
inst_measure_by_uni %>%
split(.$uni_lemma) %>%
map_df(fit_inst_measure_uni)
}
fit_inst <- function(inst_data) {
print(unique(inst_data$language))
lang_uni_lemmas <- inst_data %>%
select(uni_lemma, definition) %>%
distinct() %>%
filter(!is.na(uni_lemma))
inst_data_mapped <- inst_data %>%
select(-uni_lemma) %>%
left_join(lang_uni_lemmas) %>%
filter(!is.na(uni_lemma)) %>%
group_by(definition) %>%
filter("WG" %in% form)
inst_data_mapped %>%
split(.$measure) %>%
map_df(fit_inst_measure)
}
all_prop_data <- map_df(raw_data, fit_inst)
data_mode <- "remote"
admins <- get_administration_data(mode = data_mode) %>%
select(data_id, age, language, form)
# all items in all languages
items <- get_item_data(mode = data_mode) %>%
mutate(num_item_id = as.numeric(substr(item_id, 6, nchar(item_id))),
definition = tolower(definition))
languages <- c("Croatian", "Danish", "English", "French (Quebec)", "Italian",
"Norwegian", "Russian", "Spanish", "Swedish", "Turkish")
# choose words in english
words <- items %>%
filter(type == "word", language=="English")
invalid_uni_lemmas <- words %>%
group_by(uni_lemma) %>%
filter(n() > 1,
length(unique(lexical_class)) > 1) %>%
select(language, uni_lemma, lexical_class, definition) %>%
arrange(language, uni_lemma)
admins <- get_administration_data(mode = data_mode) %>%
select(data_id, age, language, form)
library(feather)
uni_prop_data<-feather::read_feather("aoa-prediction-master/aoa_unified/saved_data/uni_prop_data.feather")
View(uni_prop_data)
prop_data <- uni_prop_data %>%
select(language, measure, lexical_classes, words, prop) %>%
distinct()
prop_data_english <- filter(prop_data, language == "English")
prop_understands= subset(prop_data_english, measure=="understands",select=c( lexical_classes, words, prop))
df_IN_CDI=data_frame(words=numeric())
for (i in 1:nrow(words_all_algos))
{
if (length(which(words_all_algos[1,1]==prop_understands$words))!="0")
{df_IN_CDI=subset(prop_understands, words==words_all_algos[1,1], select = c(language, lexical_classes,words,prop))}
if (length(which(words_all_algos[i,1]==prop_understands$words))!="0")
{df_IN_CDI=rbind(df_IN_CDI, subset(prop_understands, words==words_all_algos[i,1], select = c(lexical_classes,words,prop)))}
}
View(df_IN_CDI)
library(xlsx)
setwd("~/Documents/CDSwordSeg/results/res-brent-CDS/AnalyseCDI")
write.xlsx(df_IN_CDI, "WordsInCDI.xlsx")
View(words_of_algo_NOT_in_CDI)
View(words_of_algo_IN_CDI)
View(words_of_algo_IN_CDI)
