#!/usr/bin/env python
"""This script allows the phonologization of text utterances.

Dependancies
------------

To run this you need **festival** installed on your system.  See
http://www.cstr.ed.ac.uk/projects/festival/
On Debian simply run 'apt-get install festival'. Otherwise,
visit http://www.festvox.org/docs/manual-2.4.0/festival_6.html#Installation
For example http://www.cstr.ed.ac.uk/downloads/festival/2.4/.
One doc is in
http://pkgs.fedoraproject.org/repo/pkgs/festival/festdoc-1.4.2.tar.gz/md5/faabc25a6c1b11854c41adc257c47bdb/
And the voices for instance in
http://www.cstr.ed.ac.uk/downloads/festival/2.4/voices/

Examples
--------

First, have a
$ ./phonologize --help

$ echo "hello world" | ./phonologize
hh ax l ;esyll ow ;esyll ;eword w er l d ;esyll ;eword

$ echo "hello world" > hello.txt
$ ./phonologize hello.txt
hh ax l ;esyll ow ;esyll ;eword w er l d ;esyll ;eword

$ ./phonologize hello.txt -o hello.phon
$ cat hello.phon
hh ax l ;esyll ow ;esyll ;eword w er l d ;esyll ;eword

Potential problems
------------------

The program may print on stderr something like:

  UniSyn: using default diphone ax-ax for y-pau

This is related to wave synthesis (done by festival during
phonologization). It should be useful to overload this configuration
if the phonologization takes too long (I began this but it seems a bit
tricky and time consuming).


Copyright 2015, 2016 Mathieu Bernard.

"""

import argparse
import sys
from phonologizer import phonologize, default_script


def parse_args():
    """Argument parser for the phonologization script."""
    parser = argparse.ArgumentParser()
    parser.add_argument('input', default=sys.stdin, nargs='?',
                        help='input text file to be processed, '
                        'if not specified read on stdin')
    parser.add_argument('output', default=sys.stdout, nargs='?',
                        help='output text file to write in, '
                        'if not specified write on stdout')
    parser.add_argument('-s', '--script',
                        help='festival script to be launched on background '
                        '(default is {})'.format(default_script()),
                        default=default_script())
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='display some log')
    return parser.parse_args()


def main():
    """Compute the phonologization of an input text through *festival*."""
    args = parse_args()

    streamin = args.input
    if isinstance(streamin, str):
        if args.verbose:
            print('reading from {}'.format(streamin))
        streamin = open(streamin, 'r')

    streamout = args.output
    if isinstance(streamout, str):
        if args.verbose:
            print('writing to {}'.format(streamout))
        streamout = open(streamout, 'w')

    phonologize(streamin, streamout, args.script, args.verbose)


if __name__ == '__main__':
    main()
